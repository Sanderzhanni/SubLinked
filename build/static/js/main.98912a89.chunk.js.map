{"version":3,"sources":["assets/reddit1.png","assets/reddit2.png","assets/LogoOnLight.svg","utils/particlesOptions.ts","pages/WelcomePage.tsx","components/NodeInformation.tsx","utils/cytoscapeOptions.ts","utils/cytoScapeFunctions.ts","pages/GenerateGraphPage.tsx","pages/InfoPage.tsx","utils/Links.tsx","components/Menu.tsx","pages/NotFound.tsx","utils/projectData.ts","pages/ProjectGraph.tsx","components/Router.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/LogoOnDarkReddit.svg"],"names":["module","exports","particlesOptions","autoPlay","fpsLimit","pauseOnOutsideViewport","detectRetina","background","color","backgroundMask","backgroundMode","infection","interactivity","detectsOn","events","onClick","enable","mode","onHover","resize","modes","push","quantity","grab","distance","links","blink","consent","opacity","motion","particles","animation","speed","sync","value","width","collisions","move","direction","outMode","random","straight","number","density","value_area","shape","type","size","WelcomePage","className","options","src","LogoOnDark","alt","useStyles","makeStyles","createStyles","white","NodeInformation","props","removeNodeOrEdge","addEdge","cy","colorNode","colorEdge","classes","useState","path","setPath","savedColors","setSavedColors","colorPathCheckbox","setColorPathCheckbox","sandBox","setSandBox","hideLowDegreeNodes","setHideLowDegreeNodes","connected","common","setCommon","id","degree","sourceNode","setSourceNode","targetNode","setTargetNode","setNode","node","data","BFSaStar","searchaStar","elements","aStar","root","goal","aStartPath","i","length","resetColors","forEach","item","source","target","useEffect","cxtmenu","selector","commands","content","select","e","previous","colors","getElementById","style","colorPath","$","display","classNames","FormControlLabel","control","Checkbox","checked","onChange","name","label","hidden","Card","CardHeader","subheader","action","CardContent","Grid","container","spacing","xs","Typography","variant","green","red","Box","flexWrap","justifyContent","Button","disableElevation","Divider","layoutOptionsMini","ready","stop","quality","nodeDimensionsIncludeLabels","refresh","fit","padding","randomize","nodeRepulsion","idealEdgeLength","edgeElasticity","nestingFactor","gravity","numIter","tile","animate","animationDuration","tilingPaddingVertical","tilingPaddingHorizontal","gravityRangeCompound","gravityCompound","gravityRange","initialEnergyOnIncremental","layoutOptions","initCytoscape","cytoscape","document","addNode","add","group","sizeNodes","Math","log","height","neighbours","neighborhood","remove","localStorage","removeItem","layout","run","nodeId","sourceId","targetId","styleSubredditNode","changeNodeShape","setLabel","configureAutomove","subreddit","nodes","newNode","automove","nodesMatching","reposition","dragWith","applyAutomove","join","connectByComments","comments","commentForest","comment","author","appendData","posts","affiliated","globalNodes","postComments","post","postSubredditName","currentPost","includes","stc","use","coseBilkent","GenerateGraphPage","setCy","cyData","setCyData","firstLoad","useRef","loading","setLoading","subredditName","setSubredditName","postCount","setPostCount","fetchData","toast","warning","fetch","method","then","res","json","doc","oldArray","setItem","JSON","stringify","catch","error","current","Object","entries","parse","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","draggable","pauseOnHover","CircularProgress","mx","Slider","defaultValue","step","min","max","valueLabelDisplay","marks","aria-labelledby","onChangeCommitted","TextField","onKeyPress","key","clear","InfoPage","GridList","cols","GridListTile","Picture1","GridListTileBar","title","Picture2","theme","flexGrow","menuButton","marginRight","menuIcon","menuVersion","marginLeft","Menu","menuOpen","toggleMenu","menuBool","ref","history","useHistory","prefersDarkMode","useMediaQuery","clickListener","useCallback","contains","setTimeout","addEventListener","removeEventListener","AppBar","Toolbar","IconButton","edge","aria-label","pathName","getPathName","window","location","pathname","Tooltip","placement","open","Drawer","anchor","List","ListItem","button","LogoOnLight","ListItemText","secondary","map","Fragment","num","mapIcons","primary","NotFound","a","returnData","formatProjectData","array","commentsArray","split","obj","generateAllData","allData","result","ProjectGraph","loadProjectData","getData","Router","component","exact","App","React","useMemo","createMuiTheme","palette","main","contrastText","ThemeProvider","CssBaseline","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.98912a89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/reddit1.dfe2644d.png\";","module.exports = __webpack_public_path__ + \"static/media/reddit2.35007479.png\";","module.exports = __webpack_public_path__ + \"static/media/LogoOnLight.451bcc5d.svg\";","// eslint-disable-next-line import/prefer-default-export\nexport const particlesOptions = {\n  autoPlay: true,\n  fpsLimit: 60,\n  pauseOnOutsideViewport: true,\n  detectRetina: true,\n  background: {\n    color: '#131212',\n  },\n  backgroundMask: {\n\n  },\n  backgroundMode: {\n\n  },\n  infection: {\n\n  },\n  interactivity: {\n    detectsOn: 'canvas',\n    events: {\n      onClick: {\n        enable: true,\n        mode: 'push',\n      },\n      onHover: {\n        enable: true,\n        mode: 'grab',\n      },\n      resize: true,\n    },\n    modes: {\n      push: {\n        quantity: 1,\n      },\n      grab: {\n        distance: 120,\n        links: {\n          blink: false,\n          color: '#e0d5d5',\n          consent: true,\n          opacity: 1,\n        },\n      },\n    },\n  },\n  motion: {\n\n  },\n  particles: {\n    color: {\n      animation: {\n        enable: true,\n        speed: 3,\n        sync: true,\n      },\n      value: '#ff3100',\n    },\n    links: {\n      color: '#ffffff',\n      distance: 150,\n      enable: true,\n      opacity: 0.5,\n      width: 1,\n    },\n    collisions: {\n      enable: true,\n    },\n    move: {\n      direction: 'none',\n      enable: true,\n      outMode: 'bounce',\n      random: true,\n      speed: 1,\n      straight: false,\n    },\n    number: {\n      density: {\n        enable: true,\n        value_area: 800,\n      },\n      value: 35,\n    },\n    opacity: {\n      value: 0.7,\n    },\n    shape: {\n      type: 'circle',\n    },\n    size: {\n      random: true,\n      value: 10,\n    },\n  },\n};\n","import React from 'react';\nimport Particles from 'react-tsparticles';\nimport Typography from '@material-ui/core/Typography';\nimport { particlesOptions } from '../utils/particlesOptions';\nimport LogoOnDark from '../assets/LogoOnDarkReddit.svg';\n\nconst WelcomePage = (): React.ReactElement => (\n  <>\n    <div className=\"container\">\n      <div className=\"particles__wrapper\">\n        <Particles className=\"particles__container\" options={particlesOptions} />\n        <div className=\"particles__content\">\n          <div className=\"text\">\n            <h1>Welcome To</h1>\n            <img src={LogoOnDark} className=\"particles__logo\" alt=\"Website Dark Logo\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  </>\n);\n\nexport default WelcomePage;\n","import React, { useEffect, useState } from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport DoneIcon from '@material-ui/icons/Done';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport AllInclusiveIcon from '@material-ui/icons/AllInclusive';\nimport { green, red } from '@material-ui/core/colors';\nimport Divider from '@material-ui/core/Divider';\nimport classNames from 'classnames';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport cytoscape from 'cytoscape';\nimport Node from '../interfaces/Node';\nimport SavedColor from '../interfaces/SavedColor';\n\nconst useStyles = makeStyles(() => createStyles({\n  white: {\n    color: '#fff',\n  },\n}));\n\ninterface NodeCardProps {\n  cy: cytoscape.Core | undefined;\n  addEdge: (cy: cytoscape.Core, source: string, target: string) => void;\n  removeNodeOrEdge: (cy: cytoscape.Core, id: string) => void;\n  colorNode: (cy: cytoscape.Core, nodeId: string, color: string, type: string) => void;\n  colorEdge: (cy: cytoscape.Core, sourceId: string, targetId: string, color: string) => void;\n}\n\nconst NodeInformation = (props: NodeCardProps): React.ReactElement => {\n  const {\n    removeNodeOrEdge, addEdge, cy, colorNode, colorEdge,\n  } = props;\n  const classes = useStyles();\n  const [path, setPath] = useState<cytoscape.CollectionReturnValue>(\n    [] as unknown as cytoscape.CollectionReturnValue,\n  );\n  const [savedColors, setSavedColors] = useState<SavedColor[]>([]);\n  const [colorPathCheckbox, setColorPathCheckbox] = useState(false);\n  const [sandBox, setSandBox] = useState<boolean>(false);\n  const [hideLowDegreeNodes, setHideLowDegreeNodes] = useState<boolean>(false);\n  const [common, setCommon] = useState({\n    connected: false,\n    distance: 0,\n  });\n  const [sourceNode, setSourceNode] = useState({\n    id: '',\n    type: '',\n    degree: 0,\n  });\n  const [targetNode, setTargetNode] = useState({\n    id: '',\n    type: '',\n    degree: 0,\n  });\n\n  // Convert a cytoscape node to our Node\n  const setNode = (node: cytoscape.NodeSingular): Node => ({\n    id: node.id(),\n    type: node.data().type,\n    degree: node.degree(false),\n  });\n\n  // Breath first search with aStart algorithm\n  const BFSaStar = (): void => {\n    if (sourceNode.id && targetNode.id) {\n      let distance = 0;\n      const searchaStar = cy?.elements().aStar({ root: `#${sourceNode.id}`, goal: `#${targetNode.id}` });\n      const aStartPath = searchaStar?.path;\n      if (!aStartPath) return; // If nodes are not connected\n      for (let i = 0; i < aStartPath.length; i += 2) {\n        distance += 1;\n      }\n      setCommon({\n        connected: distance > 0,\n        distance: distance - 1,\n      });\n      setPath(aStartPath);\n    }\n  };\n\n  // Revert color changes\n  const resetColors = (): void => {\n    if (!cy) return;\n    savedColors.forEach((item) => {\n      if (item.source === item.target) {\n        colorNode(cy, item.source, item.color, '');\n      }\n      colorEdge(cy, item.source, item.target, item.color);\n    });\n  };\n\n  // Color the path from the aStart path\n  const colorPath = (): void => {\n    if (!cy) return;\n    if (path.length > 1) {\n      resetColors();\n      let previous = '';\n      const colors: SavedColor[] = [];\n      for (let i = 0; i < path.length; i += 2) {\n        colors.push({\n          source: path[i].id(),\n          target: path[i].id(),\n          color: cy?.getElementById(path[i].id()).style('background-color'),\n        });\n        colorNode(cy, path[i].id(), 'green', '');\n        if (previous) {\n          colorEdge(cy, previous, path[i].id(), 'green');\n          colors.push({\n            source: previous,\n            target: path[i].id(),\n            color: 'gray',\n          });\n        }\n        previous = path[i].id();\n      }\n      setSavedColors(colors);\n    }\n  };\n\n  // Hide nodes that have less than 2 edges\n  const hideNodes = (): void => {\n    cy?.$('node').forEach((node: cytoscape.NodeSingular) => {\n      if (node.degree(false) < 2) {\n        if (hideLowDegreeNodes) {\n          node.style({\n            display: 'none',\n          });\n        } else {\n          node.style({\n            display: 'element',\n          });\n        }\n      }\n    });\n  };\n\n  // Right click menu\n  const ctxMenu = (): void => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    cy.cxtmenu({\n      selector: 'edge',\n      commands: [\n        {\n          content: 'Delete',\n          select(e: cytoscape.NodeSingular): void {\n            if (!cy) return;\n            removeNodeOrEdge(cy, e.id());\n          },\n        },\n      ],\n    });\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    cy.cxtmenu({\n      selector: 'node',\n      commands: [\n        {\n          content: 'Select Source',\n          select(e: cytoscape.NodeSingular): void {\n            const node = setNode(e);\n            setSourceNode(node);\n          },\n        },\n        {\n          content: 'Delete',\n          select(e: cytoscape.NodeSingular): void {\n            if (!cy) return;\n            removeNodeOrEdge(cy, e.id());\n          },\n        },\n        {\n          content: 'Select Target',\n          select(e: cytoscape.NodeSingular): void {\n            const node = setNode(e);\n            setTargetNode(node);\n          },\n        },\n      ],\n    });\n  };\n\n  // If cytoscape has been loaded init the ctx menu\n  useEffect(() => {\n    ctxMenu();\n  }, [cy]);\n\n  // If a new node is selected find the shortest path betweent them\n  useEffect(() => {\n    BFSaStar();\n  }, [sourceNode, targetNode]);\n\n  // Handle color change if low degree  nodes are hidden\n  useEffect(() => {\n    if (colorPathCheckbox) {\n      colorPath();\n    } else {\n      resetColors();\n    }\n    if (common.distance === -1) {\n      resetColors();\n    }\n  }, [colorPathCheckbox, path]);\n\n  // Hide low degree nodes if user checks the box\n  useEffect(() => {\n    hideNodes();\n  }, [hideLowDegreeNodes]);\n\n  return (\n    <>\n      <div className=\"nodeInfo\">\n        <div className={classNames('sandbox__checkbox')}>\n          <FormControlLabel\n            control={(\n              <Checkbox\n                className={classes.white}\n                checked={sandBox}\n                onChange={(): void => setSandBox(!sandBox)}\n                name=\"Multiple Nodes\"\n              />\n            )}\n            label=\"Info\"\n          />\n          <FormControlLabel\n            control={(\n              <Checkbox\n                checked={hideLowDegreeNodes}\n                onChange={(): void => setHideLowDegreeNodes(!hideLowDegreeNodes)}\n                name=\"Multiple Nodes\"\n                className={classes.white}\n              />\n            )}\n            label=\"Hide low degree nodes\"\n          />\n        </div>\n\n        <div className={classNames('details', { hidden: !sandBox })}>\n          <>\n            <Card className=\"Node-Card-Common\" color=\"primary\">\n              <CardHeader\n                subheader=\"Information\"\n                action={(\n                  <FormControlLabel\n                    control={(\n                      <Checkbox\n                        checked={colorPathCheckbox}\n                        onChange={(): void => setColorPathCheckbox(!colorPathCheckbox)}\n                        name=\"Multiple Nodes\"\n                        color=\"secondary\"\n                      />\n                    )}\n                    label=\"Color Path\"\n                  />\n                )}\n              />\n              <CardContent>\n                <Grid container spacing={3}>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\">\n                      Source:\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\">\n                      {sourceNode.id}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\">\n                      Target:\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\">\n                      {targetNode.id}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\">\n                      Connected:\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\">\n                      {common.connected ? <DoneIcon style={{ color: green[500] }} />\n                        : <ClearIcon style={{ color: red[500] }} />}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\">\n                      Distance:\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <Typography variant=\"body2\">\n                      {common.distance !== -1 ? common.distance : <AllInclusiveIcon />}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Box display=\"flex\" flexWrap=\"nowrap\" justifyContent=\"space-between\">\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disableElevation\n                        onClick={(): void => {\n                          if (!cy) return;\n                          addEdge(cy, sourceNode.id, targetNode.id);\n                          BFSaStar();\n                        }}\n                      >\n                        Connect\n                      </Button>\n                    </Box>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n            <Divider className=\"phoneOnly\" />\n          </>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default NodeInformation;\n","const layoutOptions = {\n  name: 'cose-bilkent',\n  // Called on `layoutready`\n  ready(): void {\n  },\n  // Called on `layoutstop`\n  stop(): void {\n  },\n  // 'draft', 'default' or 'proof\"\n  // - 'draft' fast cooling rate\n  // - 'default' moderate cooling rate\n  // - \"proof\" slow cooling rate\n  quality: 'draft',\n  // Whether to include labels in node dimensions. Useful for avoiding label overlap\n  nodeDimensionsIncludeLabels: true,\n  // number of ticks per frame; higher is faster but more jerky\n  refresh: 30,\n  // Whether to fit the network view after when done\n  fit: true,\n  // Padding on fit\n  padding: 10,\n  // Whether to enable incremental mode\n  randomize: true,\n  // Node repulsion (non overlapping) multiplier\n  nodeRepulsion: 5000,\n  // Ideal (intra-graph) edge length\n  idealEdgeLength: 100,\n  // Divisor to compute edge forces\n  edgeElasticity: 0.1,\n  // Nesting factor (multiplier) to compute ideal edge length for inter-graph edges\n  nestingFactor: 0.1,\n  // Gravity force (constant)\n  gravity: 0.25,\n  // Maximum number of iterations to perform\n  numIter: 5000,\n  // Whether to tile disconnected nodes\n  tile: false,\n  // Type of layout animation. The option set is {'during', 'end', false}\n  animate: 'during',\n  // Duration for animate:end\n  animationDuration: 10,\n  // Amount of vertical space to put between degree zero nodes\n  // during tiling (can also be a function)\n  tilingPaddingVertical: 10,\n  // Amount of horizontal space to put between degree zero\n  // nodes during tiling (can also be a function)\n  tilingPaddingHorizontal: 10,\n  // Gravity range (constant) for compounds\n  gravityRangeCompound: 1.5,\n  // Gravity force (constant) for compounds\n  gravityCompound: 1.0,\n  // Gravity range (constant)\n  gravityRange: 3.8,\n  // Initial cooling factor for incremental layout\n  initialEnergyOnIncremental: 0.5,\n};\n\nexport const layoutOptionsMini = {\n  name: 'cose-bilkent',\n  // Called on `layoutready`\n  ready(): void {\n  },\n  // Called on `layoutstop`\n  stop(): void {\n  },\n  // 'draft', 'default' or 'proof\"\n  // - 'draft' fast cooling rate\n  // - 'default' moderate cooling rate\n  // - \"proof\" slow cooling rate\n  quality: 'draft',\n  // Whether to include labels in node dimensions. Useful for avoiding label overlap\n  nodeDimensionsIncludeLabels: true,\n  // number of ticks per frame; higher is faster but more jerky\n  refresh: 30,\n  // Whether to fit the network view after when done\n  fit: true,\n  // Padding on fit\n  padding: 10,\n  // Whether to enable incremental mode\n  randomize: true,\n  // Node repulsion (non overlapping) multiplier\n  nodeRepulsion: 1000,\n  // Ideal (intra-graph) edge length\n  idealEdgeLength: 20,\n  // Divisor to compute edge forces\n  edgeElasticity: 0.1,\n  // Nesting factor (multiplier) to compute ideal edge length for inter-graph edges\n  nestingFactor: 0.1,\n  // Gravity force (constant)\n  gravity: 0.25,\n  // Maximum number of iterations to perform\n  numIter: 5000,\n  // Whether to tile disconnected nodes\n  tile: false,\n  // Type of layout animation. The option set is {'during', 'end', false}\n  animate: 'during',\n  // Duration for animate:end\n  animationDuration: 10,\n  // Amount of vertical space to put between degree zero nodes\n  // during tiling (can also be a function)\n  tilingPaddingVertical: 10,\n  // Amount of horizontal space to put between degree zero\n  // nodes during tiling (can also be a function)\n  tilingPaddingHorizontal: 10,\n  // Gravity range (constant) for compounds\n  gravityRangeCompound: 1.5,\n  // Gravity force (constant) for compounds\n  gravityCompound: 1.0,\n  // Gravity range (constant)\n  gravityRange: 3.8,\n  // Initial cooling factor for incremental layout\n  initialEnergyOnIncremental: 0.5,\n};\n\nexport default layoutOptions;\n","import cytoscape from 'cytoscape';\nimport stc from 'string-to-color';\nimport Post from '../interfaces/Post';\nimport Posts from '../interfaces/Posts';\nimport Automove from '../interfaces/Automove';\nimport layoutOptions, { layoutOptionsMini } from './cytoscapeOptions';\n\n// Initial cytoscape options\nexport const initCytoscape = (): cytoscape.Core => cytoscape({\n  container: document.getElementById('cy'),\n  style: [\n    {\n      selector: 'node',\n      style: {\n        'border-width': '2px',\n        'border-style': 'solid',\n        'border-color': 'rgba(0,0,0,.1)',\n      },\n    },\n  ],\n});\n\n// Add a new node\nexport const addNode = (cy: cytoscape.Core, id: string, type: string): void => {\n  cy.add([\n    { group: 'nodes', data: { id, type } },\n  ]);\n};\n\n// Change node size logarithmically\nconst sizeNodes = (cy: cytoscape.Core): void => {\n  cy.$('node').forEach((node: cytoscape.NodeSingular) => {\n    if (node.data().type !== 'subreddit' && node.degree(false)) {\n      node.style({\n        width: 20 + Math.log(node.degree(false)) * 15,\n        height: 20 + Math.log(node.degree(false)) * 15,\n      });\n    } else if (node.degree(false)) {\n      node.style({\n        width: Math.log(node.degree(false)) * 8,\n        height: Math.log(node.degree(false)) * 8,\n      });\n    }\n  });\n};\n\n// Add an adge between 2 nodes\nexport const addEdge = (cy: cytoscape.Core, source: string, target: string): void => {\n  if (!source || !target) return;\n  if (cy.getElementById(target).length === 0) return;\n  cy.add([\n    { group: 'edges', data: { id: `${source}__${target}`, source, target } },\n  ]);\n  sizeNodes(cy);\n};\n\n// Remoce node or edge by ID\nexport const removeNodeOrEdge = (cy: cytoscape.Core, id: string): void => {\n  if (!id) return;\n  const node = cy?.$(`#${id}`);\n  if (!node || !node.data()) return;\n  const neighbours = node.neighborhood();\n  cy.remove(node);\n  if (node.data().type === 'subreddit') {\n    cy.remove(neighbours);\n    localStorage.removeItem(id);\n    cy.layout({ name: 'cose-bilkent' }).run();\n  }\n  sizeNodes(cy);\n};\n\n// Apply color to a node\nexport const colorNode = (cy: cytoscape.Core, nodeId: string, color: string): void => {\n  cy.getElementById(nodeId).style({\n    'background-color': color,\n    'border-opacity': '0.6',\n  });\n};\n\n// Apply color to an edge\nexport const colorEdge = (\n  cy: cytoscape.Core,\n  sourceId: string,\n  targetId: string,\n  color: string,\n): void => {\n  cy.getElementById(`${sourceId}__${targetId}`).style({\n    width: 3,\n    'line-color': color,\n  });\n  cy.getElementById(`${targetId}__${sourceId}`).style({\n    width: 3,\n    'line-color': color,\n  });\n};\n\n// Subreddit type node style\nexport const styleSubredditNode = (cy: cytoscape.Core, nodeId: string): void => {\n  cy.getElementById(nodeId).style({\n    'border-width': '2px',\n    'border-style': 'solid',\n    'border-color': '#888888',\n    'border-opacity': '1',\n  });\n};\n\n// Apply text to a node\nconst setLabel = (cy: cytoscape.Core, nodeId: string, label: string): void => {\n  cy.getElementById(nodeId).style({\n    label,\n    color: '#f1efef',\n    'text-outline-color': 'black',\n    'text-outline-width': '1rem',\n    'text-outline-opacity': '0.5',\n    'font-size': '16rem',\n    'text-halign': 'center',\n    'text-valign': 'center',\n  });\n};\n\n// Apply a shape to a node\nexport const changeNodeShape = (cy: cytoscape.Core, nodeId: string, shape: string): void => {\n  cy.getElementById(nodeId).style('shape', shape);\n  setLabel(cy, nodeId, nodeId);\n};\n\n// Make all same type of nodes move together while dragging\nconst applyAutomove = (cy: Automove, subreddit: string, nodes: string): void => {\n  cy.automove({\n    nodesMatching: cy.$(nodes),\n    reposition: 'drag',\n    dragWith: cy.$(`#${subreddit}`),\n  });\n};\n\n// Connect same type of nodes\nexport const configureAutomove = (cy: cytoscape.Core): void => {\n  cy.$('node[type = \"subreddit\"]').forEach((subreddit: cytoscape.NodeSingular) => {\n    const nodes: string[] = [];\n    subreddit.neighborhood('node').forEach((node: cytoscape.NodeSingular) => {\n      const newNode: cytoscape.NodeSingular = node;\n      // Dont apply automove twice to the same node\n      !node.data().automove && nodes.push(`#${newNode.id()}`);\n      newNode.data().automove = true;\n    });\n    // Dont apply automove to an empty array\n    if (nodes.length === 0) return;\n    applyAutomove(cy as Automove, subreddit.id(), nodes.join(', '));\n  });\n};\n\n// Connect 2 nodes that appear under the same post as comments\nconst connectByComments = (cy: cytoscape.Core, comments: Post[]): void => {\n  comments.forEach((commentForest: Post) => {\n    commentForest.comments.forEach((comment: string) => {\n      if (commentForest.author === comment) return;\n      addEdge(cy, commentForest.author, comment);\n    });\n  });\n};\n\nexport const appendData = (\n  cy: cytoscape.Core,\n  posts: Posts,\n  affiliated = true,\n): void => {\n  const globalNodes: string[] = [];\n  let postComments: Post[] = [];\n  posts.forEach((post) => {\n    const postSubredditName = post[0] as string;\n    if (affiliated) {\n      addNode(cy, postSubredditName, 'subreddit');\n      colorNode(cy, postSubredditName, 'white');\n      changeNodeShape(cy, postSubredditName, 'ellipse');\n      styleSubredditNode(cy, postSubredditName);\n    }\n    for (let i = 1; i < post.length; i += 1) {\n      const currentPost = post[i] as Post;\n      const nodeId = currentPost.author;\n      const commentForest = { author: nodeId, comments: currentPost.comments };\n      postComments = [...postComments, commentForest];\n      if (!globalNodes.includes(nodeId)) {\n        addNode(cy, nodeId, 'author');\n        colorNode(cy, nodeId, stc(postSubredditName));\n      }\n      affiliated && addEdge(cy, postSubredditName, nodeId);\n      globalNodes.push(nodeId);\n    }\n  });\n  connectByComments(cy, postComments);\n  affiliated ? cy.layout(layoutOptionsMini).run() : cy.layout(layoutOptions).run();\n  configureAutomove(cy);\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport cytoscape from 'cytoscape';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport coseBilkent from 'cytoscape-cose-bilkent';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport cxtmenu from 'cytoscape-cxtmenu';\nimport { Box } from '@material-ui/core';\nimport { toast, ToastContainer } from 'react-toastify';\nimport NodeInformation from '../components/NodeInformation';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Posts from '../interfaces/Posts';\nimport {\n  initCytoscape,\n  addEdge,\n  removeNodeOrEdge,\n  colorNode,\n  colorEdge,\n  appendData,\n} from '../utils/cytoScapeFunctions';\n\ncytoscape.use(coseBilkent);\ncytoscape.use(cxtmenu);\n\nconst GenerateGraphPage = (): React.ReactElement => {\n  const [cy, setCy] = useState<cytoscape.Core>();\n  const [cyData, setCyData] = useState<Posts>([] as unknown as Posts);\n  const firstLoad = useRef(true);\n  const [loading, setLoading] = useState(false);\n  const [subredditName, setSubredditName] = useState('');\n  const [postCount, setPostCount] = useState(15);\n\n  // API request for getting data by subreddit name\n  const fetchData = (): void => {\n    // If no name has been entered\n    if (!subredditName) {\n      toast.warning('Please enter a subreddit name');\n      return;\n    }\n    // If no name has been entered\n    if (loading) {\n      toast.warning('Please wait for the previous request to finish');\n      return;\n    }\n    // Empty the input\n    setSubredditName('');\n    setLoading(true);\n    fetch(`/api/v1/data/${subredditName}/${postCount}`, {\n      method: 'GET',\n    })\n      .then((res) => res.json())\n      .then((doc) => {\n        if (!doc) {\n          toast.warning('Can not find this Subreddit!');\n          setLoading(false);\n          return;\n        }\n        setCyData((oldArray: Posts) => [...oldArray, doc] as unknown as Posts);\n        localStorage.setItem(doc[0], JSON.stringify(doc));\n        setLoading(false);\n      })\n      .catch(() => {\n        toast.error('Server Error!');\n        setLoading(false);\n      });\n  };\n\n  // Load all data that exists in local storage\n  const loadFromStorage = (): void => {\n    const postsStorage = Object.entries(localStorage);\n    postsStorage.forEach((posts) => {\n      setCyData((oldArray: Posts) => [...oldArray, JSON.parse(posts[1])] as unknown as Posts);\n    });\n  };\n\n  // Delete grapgh and all associated data\n  const deleteGraph = (): void => {\n    localStorage.clear();\n    cy?.elements().remove();\n    setCyData([] as unknown as Posts);\n  };\n\n  // If data has been received render the graph\n  useEffect(() => {\n    cy && appendData(cy, cyData);\n  }, [cyData]);\n\n  // Init cytoscape and load the data from localstorage\n  useEffect(() => {\n    if (firstLoad.current) {\n      setCy(initCytoscape());\n      firstLoad.current = false;\n      loadFromStorage();\n    }\n  }, []);\n\n  return (\n    <>\n      <ToastContainer\n        position=\"top-right\"\n        autoClose={2000}\n        hideProgressBar\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        draggable\n        pauseOnHover\n      />\n      {loading\n      && (\n        <>\n          <div className=\"loading-spinner\">\n            <CircularProgress color=\"secondary\" size={50} />\n          </div>\n        </>\n      )}\n      <div className=\"generate__page\">\n        <div className=\"scrape-controls__div\">\n          <div className=\"posts-slider\">\n            <Box mx={2}>\n              <Typography id=\"slider\" variant=\"body2\">\n                User Count\n              </Typography>\n              <Slider\n                defaultValue={15}\n                step={5}\n                min={5}\n                max={100}\n                valueLabelDisplay=\"on\"\n                marks\n                aria-labelledby=\"discrete-slider-small-steps\"\n                onChangeCommitted={(e, value): void => setPostCount(value as number)}\n                color=\"secondary\"\n              />\n            </Box>\n          </div>\n          <div className=\"line-high\">\n            <Box mx={2}>\n              <TextField\n                value={subredditName}\n                label=\"Subreddit Name\"\n                aria-labelledby=\"subredditName\"\n                onChange={(e): void => setSubredditName(e.target.value)}\n                onKeyPress={(e): void => {\n                  if (e.key === 'Enter') fetchData();\n                }}\n              />\n            </Box>\n          </div>\n          <div className=\"line-high gen__button\">\n            <Box mx={2}>\n              <Button variant=\"contained\" color=\"primary\" onClick={fetchData}>\n                Generate Subreddit\n              </Button>\n            </Box>\n          </div>\n          <div className=\"line-high gen__button\">\n            <Box mx={2}>\n              <Button variant=\"contained\" color=\"secondary\" onClick={deleteGraph}>\n                Clear All\n              </Button>\n            </Box>\n          </div>\n        </div>\n        <div id=\"canvas-wrap\">\n          <div id=\"cy\" className=\"cytoscape-calc__div\" />\n          {!firstLoad.current && (\n          <NodeInformation\n            cy={cy}\n            removeNodeOrEdge={removeNodeOrEdge}\n            addEdge={addEdge}\n            colorNode={colorNode}\n            colorEdge={colorEdge}\n          />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default GenerateGraphPage;\n","import React from 'react';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport Zoom from 'react-medium-image-zoom';\nimport Typography from '@material-ui/core/Typography';\nimport Picture1 from '../assets/reddit1.png';\nimport Picture2 from '../assets/reddit2.png';\nimport 'react-medium-image-zoom/dist/styles.css';\n\nconst InfoPage = (): React.ReactElement => (\n  <>\n    <div className=\"info-images-title\">\n      <Typography id=\"slider\" variant=\"h5\">\n        Subreddit Connections\n      </Typography>\n    </div>\n    <div className=\"info-images__div\">\n      <GridList cols={2}>\n        <GridListTile>\n          <Zoom>\n            <img src={Picture1} alt=\"Gamedev connections\" />\n          </Zoom>\n          <GridListTileBar\n            title=\"Gamedev connections\"\n          />\n        </GridListTile>\n        <GridListTile>\n          <Zoom>\n            <img src={Picture2} alt=\"Devblogs connections\" />\n          </Zoom>\n          <GridListTileBar\n            title=\"Devblogs connections\"\n          />\n        </GridListTile>\n      </GridList>\n    </div>\n  </>\n);\n\nexport default InfoPage;\n","export const links = [\n  {\n    path: '/',\n    name: 'Home Page',\n  },\n  {\n    path: '/project-graph',\n    name: 'Project Graph',\n  },\n  {\n    path: '/generate-graph',\n    name: 'Generate a Graph',\n  },\n  {\n    path: '/info',\n    name: 'Info',\n  },\n];\n\nexport const getPathName = (pathName: string): string | undefined => {\n  switch (pathName) {\n    case '/':\n      return '';\n    case '/project-graph':\n      return 'Project Graph';\n    case '/generate-graph':\n      return 'Generate a Custom Graph';\n    case '/info':\n      return 'Information';\n  }\n};\n","import React, {\n  useState, useRef, useEffect, useCallback,\n} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Drawer from '@material-ui/core/Drawer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AccountTreeIcon from '@material-ui/icons/AccountTree';\nimport InfoIcon from '@material-ui/icons/Info';\nimport AddToQueueIcon from '@material-ui/icons/AddToQueue';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport HomeIcon from '@material-ui/icons/Home';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport LogoOnLight from '../assets/LogoOnLight.svg';\nimport LogoOnDark from '../assets/LogoOnDarkReddit.svg';\nimport { links, getPathName } from '../utils/Links';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  menuIcon: {\n    marginRight: theme.spacing(2),\n  },\n  menuVersion: {\n    marginLeft: theme.spacing(1),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\ninterface Classes {\n  menuIcon: string | undefined;\n}\n\nconst mapIcons = (num: number, classes: Classes): React.ReactElement => {\n  switch (num) {\n    case 1:\n      return <AccountTreeIcon className={classes.menuIcon} />; // project graph\n    case 2:\n      return <AddToQueueIcon className={classes.menuIcon} />; // generate\n    case 3:\n      return <InfoIcon className={classes.menuIcon} />;\n    default:\n      return <HomeIcon className={classes.menuIcon} />;\n  }\n};\n\nconst Menu = (): React.ReactElement => {\n  const [menuOpen, toggleMenu] = useState(false);\n  const menuBool = useRef(false);\n  const ref = useRef<HTMLDivElement>(null);\n  const ANIMATION_TIME = 255; // seconds\n  const classes = useStyles();\n  const history = useHistory();\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const clickListener = useCallback(\n    (e: MouseEvent) => {\n      if (!(ref.current)?.contains(e.target as HTMLElement)) {\n        if (menuBool.current) {\n          toggleMenu(false);\n        }\n      }\n    },\n    [],\n  );\n\n  useEffect(() => {\n    setTimeout(() => {\n      menuBool.current = menuOpen;\n    }, ANIMATION_TIME);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', clickListener);\n    return (): void => {\n      document.removeEventListener('click', clickListener);\n    };\n  }, [clickListener]);\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={(): void => toggleMenu(true)}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            { getPathName(window.location.pathname) }\n          </Typography>\n          <Tooltip title=\"Project on GitHub\" placement=\"left\">\n            <IconButton edge=\"end\" color=\"inherit\" aria-label=\"menu\" onClick={(): Window | null => window.open('https://github.com/Sanderzhanni/SubLinked', '_blank')}>\n              <GitHubIcon />\n            </IconButton>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n      <Drawer anchor=\"left\" open={menuOpen} variant=\"persistent\" ref={ref}>\n        <List>\n          <ListItem\n            button\n            onClick={(): void => {\n              toggleMenu(false);\n              history.push('/');\n            }}\n          >\n            {prefersDarkMode\n              ? <img src={LogoOnDark} className=\"menu-logo\" alt=\"Website Dark Logo\" />\n              : <img src={LogoOnLight} className=\"menu-logo\" alt=\"Website Light Logo\" />}\n          </ListItem>\n          <ListItem>\n            <ListItemText className={classes.menuVersion} secondary=\"v 2.12.0\" />\n          </ListItem>\n          <Divider />\n          {links.map((item, i) => (\n            <React.Fragment key={item.name}>\n              <ListItem\n                button\n                onClick={(): void => {\n                  toggleMenu(false);\n                  history.push(item.path);\n                }}\n              >\n                {mapIcons(i, classes)}\n                <ListItemText primary={item.name} />\n              </ListItem>\n            </React.Fragment>\n          ))}\n        </List>\n      </Drawer>\n    </>\n  );\n};\n\nexport default Menu;\n","import React from 'react';\n\nconst NotFound = (): React.ReactElement => (\n  <>\n    <div>Can no find this page</div>\n  </>\n);\n\nexport default NotFound;\n","import Post from '../interfaces/Post';\nimport Posts from '../interfaces/Posts';\n\ninterface PrePost {\n  author: string;\n  comments: string;\n}\n\ninterface PostsData {\n  name: string;\n  array: PrePost[];\n}\n\nconst fetchData = async (): Promise<PostsData[]> => {\n  let returnData: PostsData[] = [];\n  await fetch('/api/v1/data', {\n    method: 'GET',\n  })\n    .then((res) => res.json())\n    .then((data) => {\n      returnData = data;\n    })\n    .catch(() => {\n    });\n  return returnData;\n};\n\nconst formatProjectData = (subredditName: string, array: PrePost[]): Posts => {\n  const posts: Posts = [subredditName] as unknown as Posts;\n  array.forEach((item) => {\n    const commentsArray = item.comments.split(' ');\n    const obj: Post = {\n      author: item.author,\n      comments: commentsArray,\n    };\n    posts.push(obj as unknown as Post[]);\n  });\n  return posts;\n};\n\nexport const generateAllData = async (): Promise<Posts[]> => {\n  const allData: Posts[] = [] as unknown as Posts[];\n  try {\n    const data = await fetchData();\n    data.forEach((item: PostsData) => {\n      const result = formatProjectData(item.name, item.array);\n      allData.push(result);\n    });\n    return allData;\n  } catch (e) {\n    return [];\n  }\n};\n\nexport default generateAllData;\n","import React, { useEffect, useRef, useState } from 'react';\nimport cytoscape from 'cytoscape';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport coseBilkent from 'cytoscape-cose-bilkent';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport automove from 'cytoscape-automove';\nimport NodeInformation from '../components/NodeInformation';\nimport { generateAllData as getData } from '../utils/projectData';\nimport Post from '../interfaces/Post';\nimport Posts from '../interfaces/Posts';\nimport {\n  addEdge,\n  removeNodeOrEdge,\n  colorNode,\n  colorEdge,\n  appendData,\n  initCytoscape,\n} from '../utils/cytoScapeFunctions';\n\ncytoscape.use(coseBilkent);\ncytoscape.use(automove);\n\nconst ProjectGraph = (): React.ReactElement => {\n  const [cy, setCy] = useState<cytoscape.Core>();\n  const [cyData, setCyData] = useState<[string, Post[]]>([] as unknown as Posts);\n  const firstLoad = useRef(true);\n\n  // Get data from pregenerated graph data\n  const loadProjectData = async (): Promise<void> => {\n    const data = await getData();\n    data.forEach((post: Posts) => {\n      setCyData((oldArray: Posts) => [...oldArray, post] as unknown as Posts);\n    });\n  };\n\n  // If data is loaded render the graph\n  useEffect(() => {\n    cy && appendData(cy, cyData, false);\n  }, [cyData]);\n\n  // Init cytoscape and load data\n  useEffect(() => {\n    if (firstLoad.current) {\n      setCy(initCytoscape);\n      firstLoad.current = false;\n      loadProjectData();\n    }\n  }, []);\n\n  return (\n    <>\n      <div id=\"canvas-wrap\">\n        <div id=\"cy\" className=\"cytoscape__div\" />\n        {!firstLoad.current && (\n        <NodeInformation\n          cy={cy}\n          removeNodeOrEdge={removeNodeOrEdge}\n          addEdge={addEdge}\n          colorNode={colorNode}\n          colorEdge={colorEdge}\n        />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ProjectGraph;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport WelcomePage from '../pages/WelcomePage';\nimport GenerateGraphPage from '../pages/GenerateGraphPage';\nimport InfoPage from '../pages/InfoPage';\nimport Menu from './Menu';\nimport NotFound from '../pages/NotFound';\nimport ProjectGraph from '../pages/ProjectGraph';\n\n// Change\n\nconst Router = (): React.ReactElement => (\n  <>\n    <BrowserRouter>\n      <Route path=\"/\" component={Menu} />\n      <Switch>\n        <Route path=\"/\" exact component={WelcomePage} />\n        <Route path=\"/project-graph\" exact component={ProjectGraph} />\n        <Route path=\"/generate-graph\" exact component={GenerateGraphPage} />\n        <Route path=\"/info\" exact component={InfoPage} />\n        <Route component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  </>\n);\n\nexport default Router;\n","import React from 'react';\nimport './style/App.scss';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Router from './components/Router';\n\nfunction App(): React.ReactElement {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = React.useMemo(\n    () => createMuiTheme({\n      palette: {\n        type: prefersDarkMode ? 'dark' : 'light',\n        primary: {\n          // light: will be calculated from palette.primary.main,\n          main: '#2C373E',\n          // dark: will be calculated from palette.primary.main,\n          // contrastText: will be calculated to contrast with palette.primary.main\n        },\n        secondary: {\n          main: '#546A7F',\n          contrastText: '#F2F3F6',\n        },\n      },\n    }),\n    [prefersDarkMode],\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Router />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* eslint no-console: 0 */ // --> OFF\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/LogoOnDarkReddit.a74496c8.svg\";"],"sourceRoot":""}